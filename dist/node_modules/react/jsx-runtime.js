(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-runtime"] = global["jsx-runtime"] || {}, global["jsx-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

  const supportSymbols = typeof Symbol === 'function' && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbols ? Symbol.for('react.element') : 0xeac7;

  // ReactElement
  const ReactElement = (type, key, ref, props) => {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          __mark: 'li-jia-nan',
      };
      return element;
  };
  const jsx = (type, config, ...maybeChildren) => {
      let key = null;
      let ref = null;
      const props = {};
      for (const prop in config) {
          const value = config[prop];
          if (prop === 'key') {
              if (value !== undefined) {
                  key = '' + value;
              }
              continue;
          }
          if (prop === 'ref') {
              if (value !== undefined) {
                  ref = value;
              }
              continue;
          }
          if (Object.hasOwnProperty.call(config, prop)) {
              props[prop] = value;
          }
      }
      const childrenLength = maybeChildren.length;
      if (childrenLength) {
          if (childrenLength === 1) {
              props.children = maybeChildren[0];
          }
          else {
              props.children = maybeChildren;
          }
      }
      return ReactElement(type, key, ref, props);
  };
  const jsxDEV = (type, config) => {
      let key = null;
      let ref = null;
      const props = {};
      for (const prop in config) {
          const value = config[prop];
          if (prop === 'key') {
              if (value !== undefined) {
                  key = '' + value;
              }
              continue;
          }
          if (prop === 'ref') {
              if (value !== undefined) {
                  ref = value;
              }
              continue;
          }
          if (Object.hasOwnProperty.call(config, prop)) {
              props[prop] = value;
          }
      }
      return ReactElement(type, key, ref, props);
  };

  exports.jsx = jsx;
  exports.jsxDEV = jsxDEV;

}));
